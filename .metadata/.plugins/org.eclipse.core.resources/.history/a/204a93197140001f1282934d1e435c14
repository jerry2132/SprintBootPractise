package com.example.SpringDemoProject.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import com.example.SpringDemoProject.apiResponse.ApiResponse;
import com.example.SpringDemoProject.dao.CollegeDao;
import com.example.SpringDemoProject.dto.College;

@Service
public class CollegeImpl implements CollegeInterface {

	// List<College> col = new ArrayList<>();

	@Autowired
	private CollegeDao collegeDao;
	
	@Autowired
	private ApiResponse<College> apiResponse;
	
	@Autowired
	private ApiResponse<List<College>> apiResponseList;

	@Override
	public String saveCollege(College college) {

		if (college != null && hasNullOrZeroFields(college)) {
			collegeDao.saveCollegeDao(college);
			return "saved";

		} else {

			return " not saved";
		}
	}

	private boolean hasNullOrZeroFields(College college) {
		// TODO Auto-generated method stub
		return college.getId() != 0 && !(college.getCollegeName() == null || college.getCollegeName().equals("null"))
				&& !(college.getType() == null || college.getType().equals("null"))
				&& !(college.getAddress() == null || college.getAddress().equals("null"));
	}

	@Override
	public ResponseEntity<ApiResponse<College>> getCollegeDetails() {
		// TODO Auto-generated method stub
		List<College> college = collegeDao.getAllCollege();

		if (!college.isEmpty()) {
			//ApiResponse<College> response = new ApiResponse<>("success", "all colege details ", college);
			apiResponseList.setStatus("success");
			apiResponseList.setMessage("all colege details ");
			apiResponseList.setData(college);
			return new ResponseEntity<ApiResponse<College>>(apiResponseList, null);
		}

		ApiResponse<College> response = new ApiResponse<>("error ", "no college to show", college);
		return new ResponseEntity<>(response, HttpStatus.NOT_FOUND);
	}

	@Override
	public String saveMultipleCollege(List<College> college) {
		// TODO Auto-generated method stub
		if (!college.isEmpty()) {
			collegeDao.saveMultipleCollege(college);
			return "saved";
		} else {
			return "not saved";
		}

	}

	@Override
	public ResponseEntity<ApiResponse<College>> saveMultipleCollegeWithValidation(List<College> college) {
		// TODO Auto-generated method stub

		List<College> college3 = new ArrayList<>();
		for (College college2 : college) {

			if (college2 != null && hasNullOrZeroFields(college2)) {
				college3.add(college2);
			} else {

				ApiResponse<College> response = new ApiResponse<>("error", "some data is null, can not save null value",
						college2);
				return new ResponseEntity<ApiResponse<College>>(response, HttpStatus.NOT_ACCEPTABLE);
			}
		}

		collegeDao.saveMultipleCollege(college3);

		ApiResponse<College> response = new ApiResponse<>("success", "daata saved suucessfully", college3);
		return new ResponseEntity<ApiResponse<College>>(response, HttpStatus.CREATED);
	}

	@Override
	public ResponseEntity<ApiResponse<College>> findCollegeById(int collegeId) {
		// TODO Auto-generated method stub

		if (collegeId != 0) {
			Optional<College> optionalCollege = collegeDao.findCollegeById(collegeId);

			if (optionalCollege.isPresent()) {

				College college = optionalCollege.get();
				ApiResponse<College> response = new ApiResponse<>("success", "id found ", college);

				return new ResponseEntity<>(response, HttpStatus.OK);
			} else {
				ApiResponse<College> response = new ApiResponse<>("error",
						"no data found on this id , id doesnt exist ", null);
				return new ResponseEntity<>(response, HttpStatus.NOT_FOUND);
			}
		}
		ApiResponse<College> response = new ApiResponse<>("errror", "id found can not be 0", null);
		return new ResponseEntity<>(response, HttpStatus.NOT_ACCEPTABLE);
	}

	@Override
	public ResponseEntity<ApiResponse<College>> findAllByName(String name) {
		// TODO Auto-generated method stub

		if (!name.isEmpty()) {
			List<College> college = collegeDao.findByName(name);

			if (!college.isEmpty()) {
				ApiResponse<College> response = new ApiResponse<>("success", "data found by this name", college);

				return new ResponseEntity<>(response, HttpStatus.OK);
			} else {

				ApiResponse<College> response = new ApiResponse<>("error", "no data found by this name", null);
				return new ResponseEntity<>(response, HttpStatus.NOT_FOUND);
			}

		} else {

			ApiResponse<College> response = new ApiResponse<>("error", "name can not be empty", null);
			return new ResponseEntity<>(response, HttpStatus.NO_CONTENT);

		}

	}

	public boolean fieldMatch(String field) {

		return field.equals("collegeName") || field.equals("id") || field.equals("address") || field.equals("type");
	}

	@Override
	public ResponseEntity<ApiResponse<College>> sortByField(String field) {
		// TODO Auto-generated method stub

		if (field == null || field.isEmpty() || !fieldMatch(field)) {
			ApiResponse<College> response = new ApiResponse<>("error", "No such field: " + field, null);
			return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
		}

		List<College> colleges = collegeDao.finCollegeBySorting(field);
		if (colleges.isEmpty()) {
			ApiResponse<College> response = new ApiResponse<>("error", "No data found for field: " + field, null);
			return new ResponseEntity<>(response, HttpStatus.NO_CONTENT);
		}

		ApiResponse<College> response = new ApiResponse<>("success", "Data sorted by " + field, colleges);
		return new ResponseEntity<>(response, HttpStatus.OK);
	}

	@Override
	public ResponseEntity<ApiResponse<College>> sortAndPaginationGetAll(String field, Integer offSet,
			Integer pageSize) {
		// TODO Auto-generated method stub

		if (field == null || field.isEmpty() || !fieldMatch(field) || offSet < 0 || pageSize <= 0) {

			ApiResponse<College> response = new ApiResponse<>("error", "incorrect url ", null);
			return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
		}

		List<College> college = collegeDao.paginationAndSorting(offSet, pageSize, field);

		if (college.isEmpty()) {
			ApiResponse<College> response = new ApiResponse<>("error", "no  data available ", null);
			return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
		}

		ApiResponse<College> response = new ApiResponse<>("success", "Data sorted by " + field, college);
		return new ResponseEntity<>(response, HttpStatus.OK);

	}

}
